cmake_minimum_required(VERSION 3.8 FATAL_ERROR) 
project(McVineGPU LANGUAGES C CXX CUDA)

option(BUILD_TESTING "Build tests." OFF)

file(GLOB cpu_source_files "${CMAKE_SOURCE_DIR}/src/*.cpp")
file(GLOB gpu_source_files "${CMAKE_SOURCE_DIR}/cuda/*.cu")
file(GLOB gpu_headers "${CMAKE_SOURCE_DIR}/include/*.hpp")

# This is for testing multi-GPU on Box only
# As multi-GPU support is added for more objects, remove the corresponding
# files from these commands.
list(REMOVE_ITEM gpu_source_files "${CMAKE_SOURCE_DIR}/cuda/Cylinder.cu" "${CMAKE_SOURCE_DIR}/cuda/Pyramid.cu" "${CMAKE_SOURCE_DIR}/cuda/Sphere.cu")
list(REMOVE_ITEM gpu_headers "${CMAKE_SOURCE_DIR}/include/Cylinder.hpp" "${CMAKE_SOURCE_DIR}/include/Pyramid.hpp" "${CMAKE_SOURCE_DIR}/include/Sphere.hpp")

if(BUILD_TESTING)
    file(GLOB test_cuda_src "${CMAKE_SOURCE_DIR}/test/*.cu")
    file(GLOB test_cuda_headers "${CMAKE_SOURCE_DIR}/test/*.hpp")
    file(GLOB test_drivers "${CMAKE_SOURCE_DIR}/test/*.cpp")
endif()

message(STATUS "CUDA include directories are ${CMAKE_CUDA_TOOLKIT_INCLUDE_DIRECTORIES}")

include_directories(${CMAKE_SOURCE_DIR}/include)
include_directories(${CMAKE_CUDA_TOOLKIT_INCLUDE_DIRECTORIES})

#find_package(HDF5 COMPONENTS C HL NO_MODULE REQUIRED shared)
#find_package(HDF5 COMPONENTS C HL NO_MODULE REQUIRED static)
#if(HDF5_FOUND)
#    include_directories(${HDF5_INCLUDE_DIR})
#    set(_hdf5_libs hdf5 hdf5_cpp)
#endif()

list(APPEND CMAKE_CUDA_FLAGS "-cudart static")

option(DEBUG "Triggers a full debug build." OFF)
option(PRINT1 "Builds the debug for the external intersection calculation" OFF)
option(PRINT2 "Builds the debug for the scattering site calculation" OFF)
option(PRINT3 "Builds the debug for the elastic scattering velocity calculation" OFF)
option(PRINT4 "Builds the debug for the internal intersection calculation" OFF)
option(RANDTEST "Builds the debug for the Spherical RNG." OFF)
option(INTERIORTEST "Builds the debug for checking the raw data from the interior intersection algorithm." OFF)

if(DEBUG)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DDEBUG")
    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -DDEBUG")
endif()
if(PRINT1)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DPRINT1")
    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -DPRINT1")
endif()
if(PRINT2)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DPRINT2")
    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -DPRINT2")
endif()
if(PRINT3)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DPRINT3")
    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -DPRINT3")
endif()
if(PRINT4)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DPRINT4")
    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -DPRINT4")
endif()
if(RANDTEST)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DRANDTEST")
    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -DRANDTEST")
endif()
if(INTERIORTEST)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DINTERIORTEST")
    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -DINTERIORTEST")
endif()

add_library(cuMcVine STATIC ${gpu_source_files} ${gpu_headers})

target_compile_features(cuMcVine PUBLIC cxx_std_11)
set_target_properties(cuMcVine PROPERTIES CUDA_SEPARABLE_COMPILATION ON)
target_link_libraries(cuMcVine curand)
#target_link_libraries(cuMcVine curand ${_hdf5_libs})

add_executable(${PROJECT_NAME} ${cpu_source_files})
target_compile_features(${PROJECT_NAME} PUBLIC cxx_std_11)
target_link_libraries(${PROJECT_NAME} PRIVATE cuMcVine)
#target_link_libraries(${PROJECT_NAME} PRIVATE cuMcVine ${_hdf5_libs})

if(BUILD_TESTING)
    message(STATUS "Building test suite.")
    add_library(testMcVine ${test_cuda_src} ${test_cuda_headers})
    set_target_properties(testMcVine PROPERTIES CUDA_SEPARABLE_COMPILATION ON)
    target_compile_features(testMcVine PUBLIC cxx_std_11)
    target_link_libraries(testMcVine cuMcVine)

    add_executable(Test_${PROJECT_NAME} ${test_drivers})
    target_compile_features(Test_${PROJECT_NAME} PUBLIC cxx_std_11)
    target_link_libraries(Test_${PROJECT_NAME} PRIVATE testMcVineLib)
endif()
